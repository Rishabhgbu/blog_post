{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:3002/api'\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['x-auth-token'] = token;\n    console.log('Token being sent:', token.substring(0, 20) + '...');\n  } else {\n    console.log('No token found in localStorage');\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle token errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    console.log('Authentication error, clearing localStorage');\n    localStorage.removeItem('token');\n    localStorage.removeItem('userId');\n    localStorage.removeItem('username');\n    // Optionally redirect to login\n    if (window.location.pathname !== '/login' && window.location.pathname !== '/register') {\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","console","log","substring","error","Promise","reject","response","_error$response","status","removeItem","window","location","pathname","href"],"sources":["C:/Users/risha/OneDrive/Desktop/blog app/public/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:3002/api'\n});\n\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['x-auth-token'] = token;\n    console.log('Token being sent:', token.substring(0, 20) + '...');\n  } else {\n    console.log('No token found in localStorage');\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle token errors\napi.interceptors.response.use(\n  response => response,\n  error => {\n    if (error.response?.status === 401) {\n      console.log('Authentication error, clearing localStorage');\n      localStorage.removeItem('token');\n      localStorage.removeItem('userId');\n      localStorage.removeItem('username');\n      // Optionally redirect to login\n      if (window.location.pathname !== '/login' && window.location.pathname !== '/register') {\n        window.location.href = '/login';\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;AAEFF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACrC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAAC,cAAc,CAAC,GAAGH,KAAK;IACtCI,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEL,KAAK,CAACM,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;EAClE,CAAC,MAAM;IACLF,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;EAC/C;EACA,OAAON,MAAM;AACf,CAAC,EAAEQ,KAAK,IAAI;EACV,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACAd,GAAG,CAACG,YAAY,CAACc,QAAQ,CAACZ,GAAG,CAC3BY,QAAQ,IAAIA,QAAQ,EACpBH,KAAK,IAAI;EAAA,IAAAI,eAAA;EACP,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCR,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;IAC1DJ,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;IAChCZ,YAAY,CAACY,UAAU,CAAC,QAAQ,CAAC;IACjCZ,YAAY,CAACY,UAAU,CAAC,UAAU,CAAC;IACnC;IACA,IAAIC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,QAAQ,IAAIF,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAAW,EAAE;MACrFF,MAAM,CAACC,QAAQ,CAACE,IAAI,GAAG,QAAQ;IACjC;EACF;EACA,OAAOT,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAed,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}